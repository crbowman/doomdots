#+TITLE: Emacs Configuration
#+AUTHOR: Curtis Bowman
#+EMAIL: curtis@partiallyappllied.tech
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args :tangle  "~/code/dotfiles/editor/emacs/curtis.el"

* Personal Information
#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Personal Information
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq user-full-name "Curtis Bowman"
        user-mail-address "curtis@partiallyappllied.tech")
#+END_SRC

* Appearance
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Appearance
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp :tangle
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Fonts
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle "~/.config/doom/config.el"
;; Fonts

(defconst my-frame-width (/ (display-pixel-width) 2))
(defconst my-frame-height (/ (display-pixel-height) 2))

(defconst my-font-size (cond ((<= 2880 (display-pixel-height)) 28)
                             ((<= 2560 (display-pixel-height)) 24)
                             ((<= 1980 (display-pixel-height)) 20)
                             ((<= 1440 (display-pixel-height)) 16)
                             ((<= 1080 (display-pixel-height)) 14)))


(setq doom-font (font-spec :family "Fira Code" :size my-font-size :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size my-font-size))
(setq doom-unicode-font (font-spec :family "MesloLGS NF" :size my-font-size))

(setq display-line-numbers-type 'relative)
(setq column-number-mode t)
(setq display-time-default-load-average nil)
(setq display-time-mode t)
(setq delete-selection-mode nil)

(setq doom-modeline-buffer-file-name-style 'relative-from-project)

(use-package! doom-themes
  :config
  (setq doom-themes-enable-bolt t
        doom-themes-enable-italic t)
  (setq doom-theme 'doom-rouge)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))

(use-package! centered-window
  :custom
  (cwm-centered-window-width 180))










#+END_SRC

#+BEGIN_SRC emacs-lisp



#+END_SRC

** Doom Themes
#+BEGIN_SRC emacs-lisp





#+END_SRC

** Solaire Mode
#+BEGIN_SRC emacs-lisp








#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Miscellaneous
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** Temp Files
#+BEGIN_SRC emacs-lisp
  ;; Temp Files



#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; set org-babel default sh command to zsh
  (setq org-babel-sh-command "zsh")
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Keybindings
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** OSX
#+BEGIN_SRC emacs-lisp
      ;; OSX Specific
      (if (equal system-type 'darwin)
          (progn
            (setq mac-command-modifier 'meta)
            (setq mac-option-modifier 'super)
            (setq mac-function-modifier 'hyper)))
#+END_SRC

** Emacs Windows
#+BEGIN_SRC emacs-lisp
  ;; Emacs window switching
  (global-set-key (kbd "C-x o") (lambda ()
                                  (interactive)
                                  (other-window -1)))

  (global-set-key (kbd "C-x p") (lambda ()
                                  (interactive)
                                  (other-window 1)))

  ;; Enable windmove as an alternative to other-window
  ;; Use super-<left>|<right>|<up>|<down> to change windows
  (windmove-default-keybindings 'super)
#+END_SRC

** Function Keys
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/keys



#+END_SRC

** Miscellaneous
#+BEGIN_SRC emacs-lisp



#+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Clojure
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** Hooks
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :bind (:map clojure-mode-map
                ([C-f7] . cider-jack-in)
                ([C-M-f7] . cider-eval-buffer)))
#+END_SRC

** Fancify Symbols
Pretty symbols for anonymous functions, set literals and partial, like =(λ [a]
(+ a 5))=, =ƒ(+ % 5)=, =∈{2 4 6}= and =Ƥ=.
#+BEGIN_SRC emacs-lisp
  ;; Represent annonymous functions, partial functions, and sets with greek symbols
  (setq clojure-enable-fancify-symbols t)
#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Python
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** Pyenv
#+BEGIN_SRC emacs-lisp
  ;; Setup pyenv
  (cond ((equal system-type 'darwin)
         (defvar pyenv-home "/Users/curtis/.pyenv"))
        ((equal system-type 'gnu/linux)
         (defvar pyenv-home "/home/curtis/.config/pyenv")))

  (setq exec-path (append
                   `(,(concat pyenv-home "/bin")
                     ,(concat pyenv-home "/shims"))
                   exec-path))
#+END_SRC

** IPython
#+BEGIN_SRC emacs-lisp
  ;; Python interpreter to use for repl
  (setq python-shell-interpreter-args "--simple-prompt -i" )
  (setq python-shell-interpreter (concat pyenv-home "/shims/ipython"))
#+END_SRC

** Hooks
#+BEGIN_SRC emacs-lisp
  ;; Hooks
  (use-package python-mode
    :bind (:map python-mode-map
                ([C-f7] . +python/open-repl)))
#+END_SRC

* Smartparens
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Smartparens
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  ;; Keybindings
  (global-set-key (kbd "C-M-f") 'sp-forward-sexp)
  (global-set-key (kbd "C-M-b") 'sp-backward-sexp)

  (global-set-key (kbd "C-M-d") 'sp-down-sexp)
  (global-set-key (kbd "C-M-a") 'sp-backward-down-sexp)
  (global-set-key (kbd "C-S-d") 'sp-beginning-of-sexp)
  (global-set-key (kbd "C-S-a") 'sp-end-of-sexp)

  (global-set-key (kbd "C-M-e") 'sp-up-sexp)
  (global-set-key (kbd "C-M-u") 'sp-backward-up-sexp)
  (global-set-key (kbd "C-M-t") 'sp-transpose-sexp)

  (global-set-key (kbd "C-M-n") 'sp-forward-hybrid-sexp)
  (global-set-key (kbd "C-M-p") 'sp-backward-hybrid-sexp)

  (global-set-key (kbd "C-M-k") 'sp-kill-sexp)
  (global-set-key (kbd "C-M-w") 'sp-copy-sexp)

  (global-set-key (kbd "M-<delete>") 'sp-unwrap-sexp)
  (global-set-key (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

  (global-set-key (kbd "C-0") 'sp-forward-slurp-sexp)
  (global-set-key (kbd "C-M-0") 'sp-forward-barf-sexp)
  (global-set-key (kbd "C-9") 'sp-backward-slurp-sexp)
  (global-set-key (kbd "C-M-9") 'sp-backward-barf-sexp)

  (global-set-key (kbd "M-D") 'sp-splice-sexp)
  (global-set-key (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
  (global-set-key (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
  (global-set-key (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

  (global-set-key (kbd "C-]") 'sp-select-next-thing-exchange)
  (global-set-key (kbd "C-<left_bracket>") 'sp-select-previous-thing)
  (global-set-key (kbd "C-M-]") 'sp-select-next-thing)

  (global-set-key (kbd "M-F") 'sp-forward-symbol)
  (global-set-key (kbd "M-B") 'sp-backward-symbol)

  (global-set-key (kbd "C-\"") 'sp-change-inner)
  (global-set-key (kbd "M-i") 'sp-change-enclosing)

  (bind-key "C-c f" (lambda () (interactive) (sp-beginning-of-sexp 2)) smartparens-mode-map)
  (bind-key "C-c b" (lambda () (interactive) (sp-beginning-of-sexp -2)) smartparens-mode-map)

  (global-set-key (kbd "H-<delete>") (lambda ()
                                       (smartparens-strict-mode nil)
                                       (delete-backward-char)
                                       (smartparens-strict-mode t)))
#+END_SRC

* Which-Key
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Which-Key
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
** UI
#+BEGIN_SRC emacs-lisp
  (setq which-key-side-window-location 'right)
  (setq which-key-side-window-max-width 0.33)
  (setq which-key-side-window-max-height 0.25)
  (setq which-key-add-column-padding 2)
#+END_SRC

* GPG
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; GPG
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config
    (cond ((equal system-type 'darwin)
           (custom-set-variables '(epg-gpg-program "/usr/local/MacGPG2/bin/gpg2")))
          ((equal system-type 'gnu/linux)
           (custom-set-variables '(epg-gpg-program "/usr/bin/gpg"))))
    (epa-file-enable))
#+END_SRC

* MMM-Mode
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Multiple Major Modes
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (mmm-add-classes '((markdown-clojure
                      :submode clojure-mode
                      :face mmm-declaration-submode-face
                      :front "^{% highlight clojure %}[\n\r]+"
                      :back "^{% endhighlight %}$")))

  (mmm-add-classes '((markdown-latex
                      :submode TeX-mode
                      :face mmm-declaration-submode-face
                      :front "^\\$\\$[\n\r]+"
                      :back "^\\$\\$$")))

  (mmm-add-mode-ext-class 'markdown-mode nil 'markdown-clojure)
  (mmm-add-mode-ext-class 'markdown-mode nil 'markdown-latex)

  (setq mmm-parse-when-idle 't)
#+END_SRC
